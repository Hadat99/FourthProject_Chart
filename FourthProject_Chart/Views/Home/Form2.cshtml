@model FormModel

<script src="https://cdn.jsdelivr.net/npm/chart.js">
const { removeData } = require("jquery");
</script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@1.3.1/dist/chartjs-plugin-annotation.min.js"></script> 

<form asp-action="Form 2">
    <div class="container">
        <div class="row mb-2">
            <div class="col text-center">
                @ViewBag.message
            </div>
        </div>
        <div class="row">
            <div class="col">
                打込み間隔
            </div>
            <div class="col">
                自由落下高さ
            </div>
            <div class="col">
                打上げ方法
            </div>
            <div class="col">
                1層の打上がり高さ
            </div>
            <div class="col">
                層数
            </div>
        </div>

        @foreach (var itemP7 in Model.P0007)
        {
            <div class="row">
                <div class="col">
                    <input name="driving_interval" value="@Html.DisplayFor(modelItem => itemP7.driving_interval)" type="number" step="any" class="form-control"/>
                </div>
                <div class="col">
                    <div class="input-group mb-3">
                        <input id="free_fall_height" name="free_fall_height" value="@Html.DisplayFor(modelItem => itemP7.free_fall_height)" type="number" step="any"
                            onchange="reDrawChart()" class="form-control">
                        <span class="input-group-text">m</span>
                    </div>
                </div>
                <div class="col">
                    <input name="lauch_method" value="@Html.DisplayFor(modelItem => itemP7.lauch_method)" type="text"  class="form-control"/>
                </div>
                <div class="col">
                    <div class="input-group mb-3">
                        <input id="layer_height" name="layer_height" value="@Html.DisplayFor(modelItem => itemP7.layer_height)" type="number" step="any"
                            onchange="reDrawChart();" class="form-control">
                        <span class="input-group-text">m</span>
                    </div>
                </div>
                <div class="col">
                    <input id="layer_number" name="layer_number" value="@Html.DisplayFor(modelItem => itemP7.layer_number)" type="number" step="1" 
                            onchange="this.value = parseInt(this.value); reDrawChart();" class="form-control"/>
                </div>
            </div>
        }

        
        
        <div class="row">
            <div class="col">
                バイブ挿入間隔
            </div>
            <div class="col">
                締固め作業高さ
            </div>
            <div class="col">
                締固め時間
            </div>
            <div class="col">
                再振動（後追い）
            </div>
            <div class="col">
                型枠バイブ
            </div>
        </div>

        @foreach (var itemP8 in Model.P0008)
        {
            <div class="row">
                <div class="col">
                    <div class="input-group mb-3">
                        <input name="insertion_interval" value="@Html.DisplayFor(modelItem => itemP8.insertion_interval)" type="number" step="1" onchange="this.value = parseInt(this.value);" class="form-control">
                        <span class="input-group-text">m</span>
                    </div>
                </div>
                <div class="col">
                    <input id="compaction_work_height" name="compaction_work_height" value="@Html.DisplayFor(modelItem => itemP8.compaction_work_height)" type="number" step="any" 
                        onchange="reDrawChart();" class="form-control">
                </div>
                <div class="col">
                    <input name="compaction_time" value="@Html.DisplayFor(modelItem => itemP8.compaction_time)" type="number" step="1" onchange="this.value = parseInt(this.value);" class="form-control">
                </div>
                <div class="col">
                    <input name="re_vibration_follow_up" value="@Html.DisplayFor(modelItem => itemP8.re_vibration_follow_up)" type="text"  class="form-control"/>
                </div>
                <div class="col">
                    <input name="shuttering_vibration" value="@Html.DisplayFor(modelItem => itemP8.shuttering_vibration)" type="text"  class="form-control"/>
                </div>
            </div>
        }

        <div class="row text-center">
            <div class="col">
                <div class = "row">
                    <div class="col">
                        abc1
                    </div>
                    <div class="col">
                        xyz1
                    </div>
                </div>
            </div>
            <div class="col">
                <div class="row">
                    <div class="col-3"></div>

                    <div class="col-1 text-end">
                        <svg version="1.1" id="redLine" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	                         width="100%" height="100%" onclick="toggleData(0)"
                             viewBox="0 0 459.313 459.314" style="enable-background:new 0 0 459.313 459.314;" xml:space="preserve">
	                        <path d="M459.313,229.648c0,22.201-17.992,40.199-40.205,40.199H40.181c-11.094,0-21.14-4.498-28.416-11.774   
                                C4.495,250.808,0,240.76,0,229.66c-0.006-22.204,17.992-40.199,40.202-40.193h378.936   
                                C441.333,189.472,459.308,207.456,459.313,229.648z"/>
                        </svg>
                    </div>
                    <div id="legendNameChart2_1" class="col h6 text-start my-auto"></div>

                    <div class="col-1 text-end">
                        <svg version="1.1" id="arrow" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	                         width="100%" height="100%" onclick="toggleData(1);"
                             viewBox="0 0 512 512" style="enable-background:new 0 0 512 512;" xml:space="preserve">
                            <g transform="matrix(0.516687, 0.516687, -0.516687, 0.516687, 256, -8.544063)">
                                <path d="M188.716,278.428L87.785,379.355l-33.64-33.642c-9.071-9.073-22.714-11.782-34.566-6.876 C7.727,343.746,0,355.313,0,368.141V480.28c0,17.517,14.201,31.718,31.718,31.718L143.859,512c0.015-0.002,0.025-0.002,0.04,0 c17.519,0,31.718-14.201,31.718-31.718c0-9.255-3.965-17.585-10.287-23.385l-32.687-32.687L233.57,323.286 c12.387-12.387,12.387-32.469,0-44.856C221.187,266.041,201.101,266.043,188.716,278.428z"/>
                                <path d="M480.282,0h-112.14c-12.829,0-24.393,7.729-29.303,19.581c-4.908,11.852-2.195,25.495,6.876,34.566 l33.644,33.644L278.434,188.719c-12.387,12.387-12.387,32.469,0,44.856c6.193,6.193,14.311,9.289,22.427,9.289 c8.118,0,16.235-3.096,22.427-9.291l100.927-100.927l33.64,33.642c6.067,6.069,14.18,9.291,22.433,9.291 c4.087,0,8.209-0.789,12.131-2.415c11.852-4.91,19.581-16.477,19.581-29.303V31.718C512,14.201,497.799,0,480.282,0z"/>
                            </g>
                        </svg>
                    </div>
                    <div id="legendNameChart2_2" class="col h6 text-start my-auto"></div>

                    <div class="col-3"></div>
                </div>
            </div>
            
        </div>

        <div class="row">
            <div class="col text-center">
                <img src="https://bizweb.dktcdn.net/100/410/566/articles/3336164d74ed04bbf4a8f6f635833dde.jpg?v=1616729475870" width="500"/>
                <br />Chart 1
            </div>
            <div class="col text-center">
                <canvas id="myChart" style="width:100%;max-width:600px; max-height:600px" height="600"></canvas>
                <br />Chart 2
            </div>
        </div>

        <div class="row">
            <!-- <div class="col"></div>
            <div class="col"></div>
            <div class="col"></div>
            <div class="col"></div> -->
            <div class="col text-center">
                <button type="submit" class="btn btn-outline-primary">Submit</button>
            </div>
        </div>
    </div>
</form>



<script>
    function reDrawChart()
    {
        var lh = document.getElementById("layer_height").value;
        var ln = document.getElementById("layer_number").value;
        var cwh = document.getElementById("compaction_work_height").value;
        var peak_arrow = document.getElementById("free_fall_height").value;
        var max_Y = (peak_arrow>5.5) ? peak_arrow : 5.5;
        drawChartDat(4, 0.5, max_Y, lh, ln, 1.9, 2.1, peak_arrow, 2, cwh);
    }
    
    function toggleData(value){ //0 is 2 red lines, 1 is arrow
        if (value == 0){
            const visible = myChart.isDatasetVisible(0) && myChart.isDatasetVisible(1);
            if (visible)
            {
                myChart.getDatasetMeta(0).hidden = true;
                myChart.getDatasetMeta(1).hidden = true;
                document.getElementById("redLine").style.fill = "rgb(211, 211, 211)";
                document.getElementById("legendNameChart2_1").innerHTML = "<del>" + myChart.data.datasets[1].label + "</del>";
                myChart.update();
            }
            else
            {
                myChart.getDatasetMeta(0).hidden = false;
                myChart.getDatasetMeta(1).hidden = false;
                document.getElementById("redLine").style.fill = myChart.data.datasets[1].borderColor;
                document.getElementById("legendNameChart2_1").innerHTML = myChart.data.datasets[1].label;
                myChart.update();
            }
        }
        else if (value == 1)
        {
            const visible = myChart.isDatasetVisible(2);
            if (visible)
            {
                myChart.getDatasetMeta(2).hidden = true;
                myChart.options.plugins.annotation.annotations.MuiTen.display = false;
                document.getElementById("arrow").style.fill = "rgb(211, 211, 211)";
                document.getElementById("legendNameChart2_2").innerHTML = "<del>" + myChart.data.datasets[2].label + "</del>";
                myChart.update();
            }
            else
            {
                myChart.getDatasetMeta(2).hidden = false;
                myChart.options.plugins.annotation.annotations.MuiTen.display = true;
                document.getElementById("arrow").style.fill = myChart.data.datasets[2].borderColor;
                document.getElementById("legendNameChart2_2").innerHTML = myChart.data.datasets[2].label;
                myChart.update();
            }
        }
    }
       
    var myChart = null;
    var lh = document.getElementById("layer_height").value;
    var ln = document.getElementById("layer_number").value;
    var cwh = document.getElementById("compaction_work_height").value;
    var peak_arrow = document.getElementById("free_fall_height").value;

    drawChartDat(4, 0.5, 5.5, lh, ln, 1.9, 2.1, peak_arrow, 2, cwh);


    function drawChartDat(_maxX, _stepX, _maxY, _stepY, _numStepBorder, _xL1, _xL2, _yMinL1_2, _xL3, _yL4)
    {
        //=====================Input Data========================
            //+++++++++++Draw 2 Axis+++++++++++++++
        const minY = 0;
        const stepY = _stepY;       //
        const maxY = _maxY;         //

        const minX = 0;
        const stepX = _stepX;       //
        const maxX = _maxX;         //

            //+++++++++++Draw Rectangle++++++++++++
        const numOfStepBorder = _numStepBorder;  //

            //+++++++++++Draw Line+++++++++++++++++
                //-------Line 1 & 2----------
        const xL1 = _xL1;           //
        const xL2 = _xL2;           //
        const yMinL1_2 = _yMinL1_2;     //
        //const yMaxL1_2 = _yMaxL1_2;     //
        const yMaxL1_2 = Number(_yL4) + Number(0.5);
        const colorL1_2 = 'rgba(255,0,0,1)';


                //-------Line 3 (Arrow)------
        const xL3 = _xL3;               //
        const yMinL3 = minY;
        const yMaxL3 = yMinL1_2;
        const colorL3 = 'rgba(255,192,0,1)';

                //-------Line 4 (Max)--------
        const yL4 = _yL4;               //
        const colorL4 = colorL1_2;


        //=======================Config===========================

        const MuiTen = 
        {
            display: true,
            type: 'line',
            borderColor: colorL3,
            borderWidth: 3,
            borderDash: [10, 5],
            arrowHeads: 
            {
                start: 
                {
                    enabled: true,
                    borderDash: [0,0],
                    fill: true,
                    borderColor: colorL3,
                    width: 5,
                    height: 10,
                },
                end: 
                {
                    enabled: true,
                    borderDash: [0,0],
                    fill: true,
                    borderColor: colorL3,
                    width: 5,
                    height: 10,

                }
            },
            xMin: xL3,
            xMax: xL3,
            xScaleID: 'x',
            yMin: yMinL3,
            yMax: yMaxL3,
            yScaleID: 'y'
        };



        const chartAreaBorder = 
        {
            id: 'chartAreaBorder',
            beforeDraw(chart, args, options) 
            {
                const {ctx, chartArea: {left, top, width, height}} = chart;
                ctx.save();
                const heightOfBorder = height / (maxY / stepY) * numOfStepBorder;
                ctx.strokeStyle = options.borderColor;
                ctx.lineWidth = options.borderWidth;
                ctx.setLineDash(options.borderDash || []);
                ctx.lineDashOffset = options.borderDashOffset;
                ctx.strokeRect(left, top - heightOfBorder + height, width, heightOfBorder);
                ctx.restore();
            }
        };

        const data = {
            datasets: [
                {
                    label: 'Line 1',
                    showLine: true,
                    data: [{x: xL1, y: yMinL1_2}, {x: xL1, y: yMaxL1_2}],
                    backgroundColor: colorL1_2,
                    borderColor: colorL1_2,
                    borderWidth: 5
                },
                {
                    label: 'Line 2',
                    showLine: true,
                    data: [{x: xL2, y: yMinL1_2}, {x: xL2, y: yMaxL1_2}],
                    backgroundColor: colorL1_2,
                    borderColor: colorL1_2,
                    borderWidth: 5

                },
                {
                    label: 'Line 3',
                    showLine: false,
                    data: [{x: xL3, y: yMinL3}, {x: xL3, y: yMaxL3}],
                    borderWidth: 5,
                    backgroundColor: colorL3,
                    borderColor: colorL3,
                    borderDash: [8,8],
                },
                {
                    label: 'Line 4',
                    showLine: true,
                    data: [{x: minX, y: yL4}, {x: maxX, y: yL4}],
                    backgroundColor: colorL4,
                    borderColor: colorL4,
                    borderWidth: 5,

                }
            ]
        };


        const config = {
            type: 'scatter',
            data: data,
            options: 
            {
                scales: 
                {
                    x: 
                    {
                        type: 'linear',
                        position: 'bottom',
                        min: minX,
                        max: maxX,
                        grid:
                        {
                            display: false
                        },
                        ticks:
                        {
                            stepSize: stepX
                        },
                        title:
                        {
                            display: true,
                            text: "truc x (m)",
                            font:
                            {
                                size: 15
                            }
                        }
                    },
                    y: 
                    {
                        type: 'linear',
                        position: 'left',
                        min: minY,
                        max: maxY,
                        grid:
                        {
                            borderDash: [2,2],
                            color: "blue"
                        },
                        ticks:
                        {
                            stepSize: stepY
                        },
                        title:
                        {
                            display: true,
                            text: "truc y (m)",
                            font:
                            {
                                size: 15
                            }
                        }
                    }
                },
                plugins:
                {
                    legend:
                    {
                        display: false,
                        labels: 
                        {
                            filter: function(legendItem, chartData)
                            {
                                if (legendItem.datasetIndex === 0 || legendItem.datasetIndex === 3) 
                                {
                                    return false;
                                }
                            return true;
                            },
                            usePointStyle: true
                        },

                        onClick(e, legendItem, legend) 
                        {
                            const index = legendItem.datasetIndex;
                            const ci = legend.chart;
                            if (index == 1)
                            {

                                if (ci.isDatasetVisible(index)) 
                                {
                                    ci.getDatasetMeta(index-1).hidden = true;
                                    ci.getDatasetMeta(index).hidden = true;
                                    ci.update();
                                } 
                                else 
                                {
                                    ci.getDatasetMeta(index-1).hidden = null;
                                    ci.getDatasetMeta(index).hidden = null;
                                    ci.update();
                                }
                            }
                            else if (index == 2)
                            {
                                if (ci.isDatasetVisible(index)) 
                                {
                                    ci.getDatasetMeta(index).hidden = true;
                                    ci.options.plugins.annotation.annotations.MuiTen.display = false;
                                    ci.update();
                                } 
                                else 
                                {
                                    ci.getDatasetMeta(index).hidden = null;
                                    ci.options.plugins.annotation.annotations.MuiTen.display = true;
                                    ci.update();
                                }
                            }
                        }
                    },

                    chartAreaBorder:
                    {
                        borderColor: "black",
                        borderWidth: 2,
                        borderDashOffset: 2,
                    },

                    annotation:
                    {
                        drawTime: "afterDraw",
                        annotations:
                        {
                            MuiTen
                        }
                    }
                },

                elements:
                {
                    point:
                    {
                        pointStyle: 'line',
                        radius: 0
                    }
                }
            },
            plugins: [chartAreaBorder]
        };

        if(myChart != null) //De khi goi lai ham ve bieu do nay thi se tu dong xoa bieu do truoc do (neu co) de tranh xay ra loi
        {
            myChart.destroy();
        }

        myChart = new Chart( //Neu khong su dung cau lenh if tren thi bien nay phai khai bao var hoac const (khong can khai bao ben ngoai nua)
            document.getElementById('myChart'),
            config
        );

        document.getElementById("legendNameChart2_1").innerHTML = myChart.data.datasets[1].label;
        document.getElementById("legendNameChart2_2").innerHTML = myChart.data.datasets[2].label;
        document.getElementById("redLine").style.fill = colorL1_2;
        document.getElementById("arrow").style.fill = colorL3;
    }

    
</script>